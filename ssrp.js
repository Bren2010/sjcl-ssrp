// Generated by CoffeeScript 1.7.1
(function() {
  if (typeof sjcl === "undefined" || sjcl === null) {
    throw new Error('No sjcl library found!');
  }

  if (sjcl.keyexchange.ssrp != null) {
    throw new Error('Overriding sjcl.keyexchange.ssrp!');
  }

  sjcl.keyexchange.ssrp = {
    count: 2048,
    _serialize: function(point) {
      if (point.get != null) {
        point = point.get();
        point = sjcl.codec.base64.fromBits(point.x.concat(point.y));
        return point;
      } else {
        return sjcl.codec.base64.fromBits(point.toBits());
      }
    },
    _unserialize: function(point, curve) {
      return curve.fromBits(sjcl.codec.base64.toBits(point));
    },
    _generatePrivateKey: function(password, salt, curve) {
      var length, x;
      length = Math.floor((curve.r.bitLength() - 1) / 8);
      x = sjcl.misc.pbkdf2(password, salt, this.count, length);
      return new sjcl.bn('0x' + sjcl.codec.hex.fromBits(x));
    },
    makeVerifier: function(username, password, curve) {
      var salt, x;
      curve = curve || 256;
      if ("number" === typeof curve) {
        curve = sjcl.ecc.curves['c' + curve];
        if (curve == null) {
          throw new Error('No such curve!');
        }
      }
      salt = sjcl.random.randomWords(2, 10);
      x = this._generatePrivateKey(username + '.' + password, salt, curve);
      return [sjcl.codec.base64.fromBits(salt), this._serialize(curve.G.mult(x))];
    },
    makeChallenge: function(curve) {
      var pub, sec;
      sec = sjcl.bn.random(curve.r);
      pub = this._serialize(curve.G.mult(sec));
      return {
        pub: pub,
        sec: sec
      };
    },
    makeResponse: function(username, password, salt, chall, curve) {
      var x;
      salt = sjcl.codec.base64.toBits(salt);
      x = this._generatePrivateKey(username + '.' + password, salt, curve);
      chall = this._unserialize(chall, curve);
      return this._serialize(chall.mult(x));
    },
    verify: function(sec, verifier, resp, curve) {
      var rightResp;
      verifier = this._unserialize(verifier, curve);
      rightResp = this._serialize(verifier.mult(sec));
      return rightResp === resp;
    }
  };

}).call(this);
